@page "/countrydata"

@using Rihal_Challenge.Data;
@using Rihal_Challenge.Services;
@inherits OwningComponentBase<DataService>;
@inject IDialogService Dialog;
@inject ISnackbar Snackbar;

<MudContainer>


    <MudButton Class="mr-1" Size="Size.Small" Variant="Variant.Filled" OnClick="@((e) => AddDialog())" Color="Color.Primary"><MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon> Add</MudButton>
    @if (fakedata_visible)
    {
    <MudButton Class="mr-1" Size="Size.Small" Variant="Variant.Filled"  OnClick="@(async () => await SaveCountryFakely())" Color="Color.Primary"><MudIcon Icon="@Icons.Material.Filled.List"></MudIcon> Fake Data</MudButton>
    }

        <MudTable Items="@_cn" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<CountriesClass, bool>(FilterFunc1)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Countries</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<CountriesClass, object>(x => x.Id)">Id</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<CountriesClass, object>(x => x.Name)">Country</MudTableSortLabel></MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Country Name">@context.Name</MudTd>
                <MudTd DataLabel="Actions">
                    <MudButton  Variant="Variant.Filled" @onclick="(() => EditDialog(context))" Color="Color.Primary" Size="Size.Small"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Edit"></MudIcon> Edit</MudButton>
                    <MudButton Variant="Variant.Filled" @onclick="(() => ShowDeleteConfirm(context))" Color="Color.Error" Size="Size.Small"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Delete"></MudIcon> Delete</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <MudDialog @bind-IsVisible="modal_visible">
            <DialogContent>
                <h3>@modal_header</h3>
                <hr />
                <br />
                <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudGrid>
                        <MudItem md="12">
                            <MudTextField @bind-Value="@element_country.Name" Label="Name" Required="true" RequiredError="Enter the Class Name" />
                        </MudItem>






                    </MudGrid>
                </MudForm>
            </DialogContent>

            <DialogActions>
                <MudButton Variant="Variant.Filled" OnClick="Close" Color="Color.Default"><MudIcon Icon="@Icons.Material.Filled.Close"></MudIcon> Close</MudButton>
                <MudButton Variant="Variant.Filled" OnClick="@(async () => await SaveCountry())" Color="Color.Primary"><MudIcon Icon="@Icons.Material.Filled.Save"></MudIcon> Save</MudButton>

            </DialogActions>
        </MudDialog>

        <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
            <MessageContent>
                Are you sure to delete this record?
            </MessageContent>
            <YesButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Check">Yes</MudButton>
            </YesButton>
        </MudMessageBox>


    </MudContainer>

@code {
    public System.Collections.Generic.IList<CountriesClass> _cn;
    protected override void OnInitialized()
    {
        if (Service.TestConnection())
        {
            _cn = Service.DisplayCountries();
            if (_cn.Count == 0)
            {
                fakedata_visible = true;
            }
            else
            {
                fakedata_visible = false;
            }
        }
        else
        {
            Snackbar.Add("No database connection. Check the connection string in appsettings.json.", Severity.Error);
        }

    }
}

@code {

    //Modal Form Validation Start

    bool success;
    string[] errors = { };
    MudForm form;


    //Modal Form Validation End

    //Modal Dialog Intialize Start
    CountriesClass element_country = new CountriesClass();




    private bool modal_visible;
    private bool fakedata_visible;
    public string modal_header;
    DialogService dialogService = new DialogService();

    private void AddDialog()
    {

        element_country.Id = 0;
        element_country.Name = "";
        modal_visible = true; modal_header = "Add Country";
    }
    private void EditDialog(CountriesClass objcountry)
    {

        element_country = objcountry;
        modal_visible = true; modal_header = "Edit Country";

    }
    void Close()
    {
        _cn = Service.DisplayCountries();
        if (_cn.Count == 0)
        {
            fakedata_visible = true;
        }
        else
        {
            fakedata_visible = false;
        }
        modal_visible = false;
    }



    private async Task SaveCountry()
    {
        await form.Validate();
        if (form.IsValid)
        {

            if (element_country.Id == 0)
            {
                element_country.CreatedDate = DateTime.Now;
                element_country.ModifiedDate = DateTime.Now;
                if (Service.InsertCountry(element_country))
                {
                    Close();
                    Snackbar.Add("Record Saved Successfully", Severity.Success);

                }
                else
                {
                    Close();
                    Snackbar.Add("Country name already exsist", Severity.Error);
                }
            }
            else
            {
                element_country.ModifiedDate = DateTime.Now;
                if (Service.UpdateCountry(element_country))
                {
                    Close();
                    Snackbar.Add("Record Updated Successfully", Severity.Success);
                }
                else
                {
                    Close();
                    Snackbar.Add("Error in Record Updation", Severity.Error);
                }
            }
        }


    }
    //Modal Dialog Intialize End

    //Fake Data Entry Start

    public async Task SaveCountryFakely()
    {
        int FakeCount = 100;
        await Service.InsertFakeCountry(FakeCount);
        fakedata_visible = false;
        Close();
        Snackbar.Add("Records Saved Successfully", Severity.Success);
    }
    //Fake Data Entry End


    //Delete Alert Intialize Start

    MudMessageBox mbox { get; set; }
    string state = "";

    private async void ShowDeleteConfirm(CountriesClass objcountry)
    {
        bool? result = await mbox.Show();
        state = result == null ? "Cancelled" : "Deleted!";
        StateHasChanged();
        if (result == true)
        {
            if (Service.DeleteCountry(objcountry))
            {
                _cn.Clear();
                _cn = Service.DisplayCountries();
                if (_cn.Count == 0)
                {
                    fakedata_visible = true;
                }
                else
                {
                    fakedata_visible = false;
                }
                Snackbar.Add("Record Deleted Successfully", Severity.Success);
            }
            else
            {

                Snackbar.Add("Can't delete this country, because this country have some students records", Severity.Error);
            }
        }
        //
    }



}

@code {
    //Datatable Intialize Start
    private string searchString1 = "";



    private bool FilterFunc1(CountriesClass element) => FilterFunc(element, searchString1);


    private bool FilterFunc(CountriesClass element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
    //Datatable Intialize End
}


