@page "/studentdata"

@using Rihal_Challenge.Data;
@using Rihal_Challenge.Services;
@inherits OwningComponentBase<DataService>;
@inject IDialogService Dialog;
@inject ISnackbar Snackbar
@using Faker;

<MudContainer>

    <MudButton Class="mr-1" Size="Size.Small" Variant="Variant.Filled" OnClick="@((e) => AddDialog())" Color="Color.Primary"><MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon> Add</MudButton>
    @if (fakedata_visible)
    {
        <MudButton Class="mr-1" Size="Size.Small" Variant="Variant.Filled"  OnClick="@(async () => await SaveStudentFakely())" Color="Color.Primary"><MudIcon Icon="@Icons.Material.Filled.List"></MudIcon> Fake Data</MudButton>

    }


    <MudTable Items="@_sc" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<StudentsClass,bool>(FilterFunc1)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Students</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<StudentsClass, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<StudentsClass, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<StudentsClass, object>(x=>x.DateOfBirth)">Date of Birth</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<StudentsClass, object>(x=>x.ClassName)">Class</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<StudentsClass, object>(x=>x.CountryName)">Country</MudTableSortLabel></MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Date of Birth">@context.DateOfBirth.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="Class">@context.ClassName</MudTd>
            <MudTd DataLabel="Country">@context.CountryName</MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Variant="Variant.Filled" @onclick="(()=>EditDialog(context))" Color="Color.Primary" Size="Size.Small"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Edit"></MudIcon> Edit</MudButton>
                <MudButton Variant="Variant.Filled" @onclick="(()=>ShowDeleteConfirm(context))" Color="Color.Error" Size="Size.Small"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Delete"></MudIcon> Delete</MudButton>

            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>


    <MudDialog @bind-IsVisible="modal_visible">
        <DialogContent>
            <h3>@modal_header</h3>
            <hr />
            <br />
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudGrid>
                    <MudItem md="12">
                        <MudTextField @bind-Value="@element.Name" Label="Name" Required="true" RequiredError="Enter the Name" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudDatePicker @bind-Date="@RowDate" OpenTo="OpenTo.Year" Label="Date of Birth" MinDate="mindate" MaxDate="maxdate" DateFormat="dd/MM/yyyy" Required="true" RequiredError="Enter date of birth!" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudSelect T="int" @bind-Value="@element_class.Id" Label="Class" Validation="@(new Func<int, IEnumerable<string>>(ClassMustSelect))" Required="true" RequiredError="Select any value">
                            <MudSelectItem Value="0">@("Select")</MudSelectItem>
                            @foreach (var item in _cl)
                            {
                                <MudSelectItem Value="@(item.Id)">@(item.ClassName)</MudSelectItem>
                            }

                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <MudSelect T="int" @bind-Value="@element_country.Id" Label="Country" Validation="@(new Func<int, IEnumerable<string>>(CountryMustSelect))" Required="true" RequiredError="Select the country">
                            <MudSelectItem Value="0">@("Select")</MudSelectItem>
                            @foreach (var item in _cn)
                            {
                                <MudSelectItem Value="@(item.Id)">@(item.Name)</MudSelectItem>
                            }

                        </MudSelect>
                    </MudItem>




                </MudGrid>
            </MudForm>
        </DialogContent>

        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="Close" Color="Color.Default"><MudIcon Icon="@Icons.Material.Filled.Close"></MudIcon> Close</MudButton>
            <MudButton Variant="Variant.Filled" OnClick="@(async () => await SaveStudent())" Color="Color.Primary"><MudIcon Icon="@Icons.Material.Filled.Save"></MudIcon> Save</MudButton>
        </DialogActions>
    </MudDialog>

    <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
        <MessageContent>
            Are you sure to delete this record?
        </MessageContent>
        <YesButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Check">Yes</MudButton>
        </YesButton>
    </MudMessageBox>


</MudContainer>


@code {
    public System.Collections.Generic.IList<StudentsClass> _sc;
    public System.Collections.Generic.IList<CountriesClass> _cn;
    public System.Collections.Generic.IList<ClassesClass> _cl;


    protected override void OnInitialized()
    {
        if (Service.TestConnection())
        {
            _sc = Service.DisplayStudents();
            _cn = Service.DisplayCountries();
            _cl = Service.DisplayClasses();
            if (_cn.Count != 0 && _cl.Count != 0)
            {
                fakedata_visible = true;
            }
            else
            {
                fakedata_visible = false;
            }
        }
        else
        {
            Snackbar.Add("No database connection. Check the connection string in appsettings.json.", Severity.Error);
        }


    }
}
@code {

    //Modal Form Validation Start

    bool success;
    string[] errors = { };
    MudForm form;

    private IEnumerable<string> ClassMustSelect(int value)
    {
        if (value == 0)
        {
            yield return "Select any class";
            yield break;
        }

    }

    private IEnumerable<string> CountryMustSelect(int value)
    {
        if (value == 0)
        {
            yield return "Select any country";
            yield break;
        }

    }

    //Modal Form Validation End

    //Modal Dialog Intialize Start
    StudentsClass element = new StudentsClass();
    CountriesClass element_country = new CountriesClass();
    ClassesClass element_class = new ClassesClass();




    private bool modal_visible;
    private bool fakedata_visible;
    public string modal_header;
    DialogService dialogService = new DialogService();

    private void AddDialog()
    {
        element.Id = 0;
        element.Name = "";
        element_country.Id = 0;
        element_class.Id = 0;
        RowDate = null;
        modal_visible = true; modal_header = "Add Student";
    }
    private void EditDialog(StudentsClass objstudent)
    {


        element_country.Name = objstudent.CountryName;
        element_country.Id = objstudent.CountryId;
        element_class.Id = objstudent.ClassId;
        element = objstudent;
        RowDate = element.DateOfBirth;
        modal_visible = true; modal_header = "Edit Student";

    }
    void Close()
    {
        _sc = Service.DisplayStudents();

        modal_visible = false;
    }


    private async Task SaveStudent()
    {
        await form.Validate();
        if (form.IsValid)
        {
            element.DateOfBirth = Convert.ToDateTime(RowDate);
            element.ClassId = element_class.Id;
            element.CountryId = element_country.Id;
            if (element.Id == 0)
            {
                element.CreatedDate = DateTime.Now;
                element.ModifiedDate = DateTime.Now;
                if (Service.InsertStudent(element))
                {
                    Close();
                    Snackbar.Add("Record Saved Successfully", Severity.Success);
                }
                else
                {
                    Close();
                    Snackbar.Add("Error in Record Saving", Severity.Error);
                }
            }
            else
            {
                element.ModifiedDate = DateTime.Now;
                if (Service.UpdateStudent(element))
                {
                    Close();
                    Snackbar.Add("Record Updated Successfully", Severity.Success);
                }
                else
                {
                    Close();
                    Snackbar.Add("Error in Record Updation", Severity.Error);
                }
            }
        }


    }
    //Modal Dialog Intialize End

    //Fake Data Entry Start

    public async Task SaveStudentFakely()
    {
        int FakeCount = 10;
        await Service.InsertFakeStudent(FakeCount);
        Close();
        Snackbar.Add("Records Saved Successfully", Severity.Success);
    }
    //Fake Data Entry End

    //Date Control Intialize Start

    MudDatePicker _picker;
    DateTime? maxdate = new DateTime(2016, 12, 31);
    DateTime? mindate = new DateTime(2000, 1, 1);
    private bool autoClose;
    private bool readOnly;
    DateTime? RowDate = new DateTime();
    //Date Control Intialize End

    //Delete Alert Intialize Start

    MudMessageBox mbox { get; set; }
    string state = "";

    private async void ShowDeleteConfirm(StudentsClass objstudent)
    {
        bool? result = await mbox.Show();
        state = result == null ? "Cancelled" : "Deleted!";
        StateHasChanged();
        if (result == true)
        {
            if (Service.DeleteStudent(objstudent))
            {
                _sc.Clear();
                _sc = Service.DisplayStudents();
                Snackbar.Add("Record Deleted Successfully", Severity.Success);
            }
            else
            {

                Snackbar.Add("Error in Record Deletion", Severity.Error);
            }
        }
        //
    }



}

@code {

    //Datatable Intialize Start
    private string searchString1 = "";



    private bool FilterFunc1(StudentsClass element) => FilterFunc(element, searchString1);


    private bool FilterFunc(StudentsClass element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.CountryName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ClassName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    //Datatable Intialize End
}



